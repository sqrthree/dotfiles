"
" Vim Configurations
"
" Use :help 'option' to see the documentation for the given option.
"
set encoding=utf-8              " The encoding displayed
set background=dark             " Tell vim what the background color looks like
set number                      " Always show line number.
set relativenumber              " Show the line number relative to the line with the cursor.
set tabstop=2                   " Display 2 spaces for a tab.
set softtabstop=2               " How many columns the cursor moves right when you press <Tab>.
set shiftwidth=2                " Change the number of space characters inserted for indentation
set expandtab                   " Converts tabs to spaces
set scrolloff=999               " Always show at least n lines above/below the cursor. set to a large value causes the cursor to stay in the middle line when possible.
set cursorline                  " Enable highlighting of the current line
set cc=80,120                   " Setup a ruler at specific columns.
set showmatch                   " Enable a special bracket highlighting while in insert mode.
set ignorecase                  " Makes pattern matching case-insensitive.
set smartcase                   " Works as case-insensitive if you only use lowercase letters; otherwise, it will search in case-sensitive mode.
set splitbelow                  " Horizontal splits will automatically be below
set splitright                  " Vertical splits will automatically be to the right

" Map the leader key to ","
let mapleader = ","

" Resize splits when the window is resized.
au VimResized * :wincmd =

" Move lines up or down with alt + j/k. Works only with MacOS.
nnoremap ‚àÜ :m .+1<CR>==
nnoremap Àö :m .-2<CR>==
inoremap ‚àÜ <Esc>:m .+1<CR>==gi
inoremap Àö <Esc>:m .-2<CR>==gi
vnoremap ‚àÜ :m '>+1<CR>gv=gv
vnoremap Àö :m '<-2<CR>gv=gv

" Go to home and end using capitalized directions.
noremap H ^
noremap L $

"
" Power Vim with plugins.
" 
" The plugins are managed by [vim-plug](junegunn/vim-plug).
" Automatic installation is enabled by default.
" If you need to install it manually, you can run the following script (see https://github.com/junegunn/vim-plug#installation to get more details).
"   curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
if empty(glob('~/.vim/autoload/plug.vim'))
  silent execute '!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugins will be downloaded under the specified directory.
call plug#begin('~/.vim/plugged')

" Declare the list of plugins.
"
" Theme and ui
Plug 'altercation/vim-colors-solarized'
Plug 'vim-airline/vim-airline'
"
Plug 'tpope/vim-sensible'          " Defaults everyone can agree on.
Plug 'mhinz/vim-signify'           " Show a diff using Vim its sign column.
"
" Formatting
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
"
" Coding
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'ekalinin/Dockerfile.vim'     " Vim syntax file for Docker's Dockerfile and snippets for snipMate.
" Plugin 'SirVer/ultisnips'        " The ultimate solution for snippets in Vim.
" Plugin 'honza/vim-snippets'      " The ultimate solution for snippets in Vim.
"
" Editing
Plug 'kamykn/spelunker.vim'         " Plugin that improves Vim's spell checking function.
Plug 'tpope/vim-surround'           " Quoting/parenthesizing made simple.
Plug 'junegunn/vim-easy-align'      " A simple, easy-to-use Vim alignment plugin.
Plug 'jiangmiao/auto-pairs'         " Insert or delete brackets, parens, quotes in pair.
Plug 'mg979/vim-visual-multi'       " True Sublime Text style multiple selections for Vim.
Plug 'scrooloose/nerdcommenter'     " For intensely orgasmic commenting.
Plug 'preservim/nerdtree'           " A file system explorer for the Vim editor.
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'             " A general-purpose command-line fuzzy finder.
Plug 'dense-analysis/ale'           " Check syntax in Vim asynchronously and fix files, with Language Server Protocol (LSP) support.
Plug 'easymotion/vim-easymotion'    " Provides a much simpler way to use some motions in vim.
Plug 'ycm-core/YouCompleteMe', { 'do': './install.py --go-completer --ts-completer' }

" List ends here. Plugins become visible to Vim after this call.
call plug#end()

"
" Plugin Configurations
"
" altercation/vim-colors-solarized
colorscheme solarized               " Enable Solarized colorscheme.

" vim-prettier
let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html PrettierAsync " Running before saving async (vim 8+)

" scrooloose/nerdcommenter
let g:NERDSpaceDelims = 1           " add spaces after comment delimiters by default
let g:NERDDefaultAlign = 'left'     " align line-wise comment delimiters flush left instead of following code indentation
let g:NERDCommentEmptyLines = 1     " allow commenting and inverting empty lines (useful when commenting a region)

" preservim/nerdtree
let NERDTreeShowHidden=1            " Show hidden files
map <C-b> :NERDTreeToggle<CR>       " Ctrl + b
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif   " exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufWinEnter * if getcmdwintype() == '' | silent NERDTreeMirror | endif                                                  " open the existing NERDTree on each new tab.

" junegunn/fzf.vim
nmap <C-p> :GFiles<CR>

" kamykn/spelunker.vim
let g:spelunker_check_type = 2      " Spellcheck displayed words in buffer. Fast and dynamic.

" dense-analysis/ale
let g:ale_sign_error = 'üö®'         " https://github.com/dense-analysis/ale#5v-how-can-i-change-the-signs-ale-uses
let g:ale_sign_warning = '‚ö†Ô∏è'        " https://github.com/dense-analysis/ale#5v-how-can-i-change-the-signs-ale-uses
let g:ale_lint_on_enter = 0         " Don not run linters on opening a file.
" let g:ale_linters_explicit = 1    " Only run linters named in ale_linters settings
let g:ale_linters = {
\ 'javascript': ['cspell', 'eslint', 'tsserver'],
\ 'typescript': ['cspell', 'eslint', 'tsserver', 'typecheck'],
\}

" easymotion/vim-easymotion
let g:EasyMotion_smartcase = 1      " Turn on case-insensitive feature

" junegunn/vim-easy-align
xmap ga <Plug>(EasyAlign)           " Start interactive EasyAlign in visual mode (e.g. vipga)
nmap ga <Plug>(EasyAlign)           " Start interactive EasyAlign for a motion/text object (e.g. gaip)
